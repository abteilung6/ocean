/* tslint:disable */
/* eslint-disable */
/**
 * Ocean Development
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'accountId': number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'company': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'createdAt': string;
    /**
     * 
     * @type {AuthenticatorType}
     * @memberof Account
     */
    'authenticatorType': AuthenticatorType;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'passwordHash'?: string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AuthenticatorType = {
    Credentials: 'credentials'
} as const;

export type AuthenticatorType = typeof AuthenticatorType[keyof typeof AuthenticatorType];


/**
 * 
 * @export
 * @interface CreateMemberRequest
 */
export interface CreateMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateMemberRequest
     */
    'projectId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMemberRequest
     */
    'accountId': number;
    /**
     * 
     * @type {RoleType}
     * @memberof CreateMemberRequest
     */
    'roleType': RoleType;
}
/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'memberId': number;
    /**
     * 
     * @type {RoleType}
     * @memberof MemberResponse
     */
    'roleType': RoleType;
    /**
     * 
     * @type {MemberState}
     * @memberof MemberResponse
     */
    'state': MemberState;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'accountId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'accountUsername': string;
    /**
     * 
     * @type {AuthenticatorType}
     * @memberof MemberResponse
     */
    'accountAuthenticatorType': AuthenticatorType;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'accountEmail': string;
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'projectName': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MemberState = {
    Active: 'active',
    Pending: 'pending'
} as const;

export type MemberState = typeof MemberState[keyof typeof MemberState];


/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'projectId': number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'ownerId': number;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RegisterAccountRequest
 */
export interface RegisterAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterAccountRequest
     */
    'company': string;
}
/**
 * 
 * @export
 * @interface ResponseError
 */
export interface ResponseError {
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    'message': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleType = {
    Admin: 'admin',
    Developer: 'developer',
    Viewer: 'viewer'
} as const;

export type RoleType = typeof RoleType[keyof typeof RoleType];


/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    'password': string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAccountMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAccountMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAccountMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAccountMe(options?: any): AxiosPromise<Account> {
            return localVarFp.getApiAccountMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - interface
 * @export
 * @interface AccountApi
 */
export interface AccountApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    getApiAccountMe(options?: AxiosRequestConfig): AxiosPromise<Account>;

}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI implements AccountApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getApiAccountMe(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getApiAccountMe(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Verify your account
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthVerify: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getApiAuthVerify', 'token', token)
            const localVarPath = `/api/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRefresh: async (refreshTokenRequest: RefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('postApiAuthRefresh', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterAccountRequest} registerAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRegister: async (registerAccountRequest: RegisterAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerAccountRequest' is not null or undefined
            assertParamExists('postApiAuthRegister', 'registerAccountRequest', registerAccountRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign in with an authenticator
         * @param {AuthenticatorType} authenticator 
         * @param {SignInRequest} signInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthSignin: async (authenticator: AuthenticatorType, signInRequest: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticator' is not null or undefined
            assertParamExists('postApiAuthSignin', 'authenticator', authenticator)
            // verify required parameter 'signInRequest' is not null or undefined
            assertParamExists('postApiAuthSignin', 'signInRequest', signInRequest)
            const localVarPath = `/api/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authenticator !== undefined) {
                localVarQueryParameter['authenticator'] = authenticator;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Verify your account
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthVerify(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthVerify(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthRefresh(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthRefresh(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterAccountRequest} registerAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthRegister(registerAccountRequest: RegisterAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthRegister(registerAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign in with an authenticator
         * @param {AuthenticatorType} authenticator 
         * @param {SignInRequest} signInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthSignin(authenticator: AuthenticatorType, signInRequest: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiAuthSignin(authenticator, signInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Verify your account
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthVerify(token: string, options?: any): AxiosPromise<Account> {
            return localVarFp.getApiAuthVerify(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRefresh(refreshTokenRequest: RefreshTokenRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.postApiAuthRefresh(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterAccountRequest} registerAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthRegister(registerAccountRequest: RegisterAccountRequest, options?: any): AxiosPromise<Account> {
            return localVarFp.postApiAuthRegister(registerAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign in with an authenticator
         * @param {AuthenticatorType} authenticator 
         * @param {SignInRequest} signInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthSignin(authenticator: AuthenticatorType, signInRequest: SignInRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.postApiAuthSignin(authenticator, signInRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Verify your account
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getApiAuthVerify(token: string, options?: AxiosRequestConfig): AxiosPromise<Account>;

    /**
     * 
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    postApiAuthRefresh(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse>;

    /**
     * 
     * @param {RegisterAccountRequest} registerAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    postApiAuthRegister(registerAccountRequest: RegisterAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Account>;

    /**
     * Sign in with an authenticator
     * @param {AuthenticatorType} authenticator 
     * @param {SignInRequest} signInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    postApiAuthSignin(authenticator: AuthenticatorType, signInRequest: SignInRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse>;

}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Verify your account
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getApiAuthVerify(token: string, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getApiAuthVerify(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postApiAuthRefresh(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postApiAuthRefresh(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterAccountRequest} registerAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postApiAuthRegister(registerAccountRequest: RegisterAccountRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postApiAuthRegister(registerAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign in with an authenticator
     * @param {AuthenticatorType} authenticator 
     * @param {SignInRequest} signInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postApiAuthSignin(authenticator: AuthenticatorType, signInRequest: SignInRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postApiAuthSignin(authenticator, signInRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a member from project.
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMemberMemberid: async (memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteApiMemberMemberid', 'memberId', memberId)
            const localVarPath = `/api/member/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accept project invitation.
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMemberAccept: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getApiMemberAccept', 'token', token)
            const localVarPath = `/api/member/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a member for a project
         * @param {CreateMemberRequest} createMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMember: async (createMemberRequest: CreateMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMemberRequest' is not null or undefined
            assertParamExists('postApiMember', 'createMemberRequest', createMemberRequest)
            const localVarPath = `/api/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a member from project.
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiMemberMemberid(memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiMemberMemberid(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Accept project invitation.
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMemberAccept(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiMemberAccept(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a member for a project
         * @param {CreateMemberRequest} createMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiMember(createMemberRequest: CreateMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiMember(createMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberApiFp(configuration)
    return {
        /**
         * Delete a member from project.
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMemberMemberid(memberId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiMemberMemberid(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * Accept project invitation.
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMemberAccept(token: string, options?: any): AxiosPromise<MemberResponse> {
            return localVarFp.getApiMemberAccept(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a member for a project
         * @param {CreateMemberRequest} createMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMember(createMemberRequest: CreateMemberRequest, options?: any): AxiosPromise<MemberResponse> {
            return localVarFp.postApiMember(createMemberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemberApi - interface
 * @export
 * @interface MemberApi
 */
export interface MemberApiInterface {
    /**
     * Delete a member from project.
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    deleteApiMemberMemberid(memberId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Accept project invitation.
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    getApiMemberAccept(token: string, options?: AxiosRequestConfig): AxiosPromise<MemberResponse>;

    /**
     * Create a member for a project
     * @param {CreateMemberRequest} createMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApiInterface
     */
    postApiMember(createMemberRequest: CreateMemberRequest, options?: AxiosRequestConfig): AxiosPromise<MemberResponse>;

}

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI implements MemberApiInterface {
    /**
     * Delete a member from project.
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public deleteApiMemberMemberid(memberId: number, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).deleteApiMemberMemberid(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accept project invitation.
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public getApiMemberAccept(token: string, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getApiMemberAccept(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a member for a project
     * @param {CreateMemberRequest} createMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public postApiMember(createMemberRequest: CreateMemberRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).postApiMember(createMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a project.
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiProjectsProjectid: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteApiProjectsProjectid', 'projectId', projectId)
            const localVarPath = `/api/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProjectsProjectid: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getApiProjectsProjectid', 'projectId', projectId)
            const localVarPath = `/api/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a project
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiProjects: async (createProjectRequest: CreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('postApiProjects', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication httpAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a project.
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiProjectsProjectid(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiProjectsProjectid(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a project
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiProjects(createProjectRequest: CreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiProjects(createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Delete a project.
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiProjectsProjectid(projectId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiProjectsProjectid(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * List projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProjects(options?: any): AxiosPromise<Array<Project>> {
            return localVarFp.getApiProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProjectsProjectid(projectId: number, options?: any): AxiosPromise<Project> {
            return localVarFp.getApiProjectsProjectid(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a project
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiProjects(createProjectRequest: CreateProjectRequest, options?: any): AxiosPromise<Project> {
            return localVarFp.postApiProjects(createProjectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - interface
 * @export
 * @interface ProjectApi
 */
export interface ProjectApiInterface {
    /**
     * Delete a project.
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    deleteApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * List projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    getApiProjects(options?: AxiosRequestConfig): AxiosPromise<Array<Project>>;

    /**
     * Get a project
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    getApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig): AxiosPromise<Project>;

    /**
     * Create a project
     * @param {CreateProjectRequest} createProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    postApiProjects(createProjectRequest: CreateProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Project>;

}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI implements ProjectApiInterface {
    /**
     * Delete a project.
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteApiProjectsProjectid(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getApiProjects(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getApiProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a project
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getApiProjectsProjectid(projectId: number, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getApiProjectsProjectid(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a project
     * @param {CreateProjectRequest} createProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public postApiProjects(createProjectRequest: CreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).postApiProjects(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


